
public class rankedInvertedIndexBST{
    class frequency{
        int docID = 0;
        int freq = 0;	
    }
    BST<Integer, BST<String, Rank>> rankedBST;
    frequency[] freq = new frequency[50];
    
    public rankedInvertedIndexBST(){
        rankedBST = new BST<Integer, BST<String, Rank>>(); //key: docID or any other, value: BST<word, Rank>
    }
    public boolean insert(int docID, String word){
        if(rankedBST.empty()){
            BST<String, Rank> temp = new BST<String, Rank>();
            temp.insert(word, new Rank(word, 1));
            rankedBST.insert(docID, temp);
            return true;
        }
        else{
            if(rankedBST.Findkey(docID)){ 
                BST<String, Rank> temp = rankedBST.retrieve();
                if(temp.Findkey(word)){//found both document & word
                    Rank tempRank = temp.retrieve();
                    tempRank.add_Rank();
                    temp.update(tempRank);
                    rankedBST.update(temp);
                    return false;
                }
                    temp.insert(word, new Rank(word, 1)); //found document but not word
                    rankedBST.update(temp);
                    return true;
            }
                //document not found
                BST<String, Rank> temp = new BST<String, Rank>();
                temp.insert(word, new Rank(word, 1));
                rankedBST.insert(docID, temp);
                return true;
        }
    } //end of insert

    public boolean found(int docID, String word){
        if(rankedBST.Findkey(docID))
            if(rankedBST.retrieve().Findkey(word))
                return true;
        return false;
    }

    public int getRank(int docID, String word){
    	int value = 0;
        if(rankedBST.Findkey(docID)){
            if(rankedBST.retrieve().Findkey(word)){
                return rankedBST.retrieve().retrieve().getRank();
            }
        }
        return value; //not found
    }

    public void print(){
        rankedBST.TraverseT();
    }
    public void TermFrequency(String word){
        word = word.toLowerCase().trim();
        String[] words = word.split(" ");
        int index = 0;
        for(int docID = 0; docID < 50; docID++){
            int count = 0;
            for(int j = 0; j < words.length; j++){
                count+= getRank(docID, words[j]);
            }
            if(count>0){
                freq[index] = new frequency();
                freq[index].docID = docID;
                freq[index].freq = count;
                index++;
            }
        }
       
        mergesort(freq, 0, index-1); //also works
        for(int x  = 0; x < index; x++) {
        	System.out.println(freq[x].docID + "\t\t" + freq[x].freq);
        }
    }
    

    public static void mergesort ( frequency [] A , int l , int r ) 
    {
        if ( l >= r )
            return;
        int m = ( l + r ) / 2;
        mergesort (A , l , m ) ;          // Sort first half
        mergesort (A , m + 1 , r ) ;    // Sort second half
        merge (A , l , m , r ) ;            // Merge
    }

    private static void merge ( frequency [] A , int l , int m , int r ) 
    {
        frequency [] B = new frequency [ r - l + 1];
        int i = l , j = m + 1 , k = 0;
    
        while ( i <= m && j <= r )
        {
            if ( A [ i ].freq >= A [ j ].freq)
                B [ k ++] = A [ i ++];
            else
                B [ k ++] = A [ j ++];
        }
        
        if ( i > m )
            while ( j <= r )
                B [ k ++] = A [ j ++];
        else
            while ( i <= m )
                B [ k ++] = A [ i ++];
        
        for ( k = 0; k < B . length ; k ++)
            A [ k + l ] = B [ k ];
    }


}